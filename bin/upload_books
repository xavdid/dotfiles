#!/usr/bin/env node
const HOME = require("os").homedir();
const requireGlobal = (m) => {
  const { join } = require("path");
  // `yarn global dir` returns /Users/david/.config/yarn/global

  try {
    return require(join(HOME, "/.config/yarn/global/node_modules/", m));
  } catch (e) {
    if (e.code === "MODULE_NOT_FOUND") {
      console.error(
        `unable to find "${m}", install it globally:\n\n\tyarn global add ${m}\n`
      );
      process.exit(1);
    }
    throw e;
  }
};

/////////////////////////////////////////////////////////////////

if (!process.env.DROPBOX) {
  console.error(`ERR - command requires the "DROPBOX" env variable to be set`);
  process.exit(1);
}

const { countWords } = requireGlobal("epub-wordcount");
const got = requireGlobal("got");
const config = requireGlobal("@brownman/config");
const { program } = requireGlobal("commander");
const inquirer = requireGlobal("inquirer");
const { extname, parse, resolve, join } = require("path");
const fs = require("fs");
const { unlink } = require("fs/promises");
const { spawnSync, spawn } = require("child_process");

const url = config.readZapUrl("book");

const EBOOKS_DIR = `${HOME}/Downloads/ebooks`;
const RETRY_KEY = "__retry__";

const copyToClipboard = (str) => {
  const proc = spawn("pbcopy");
  proc.stdin.write(str);
  proc.stdin.end();
};

const sendData = async (data) => {
  try {
    await got.post(url, { json: data });
  } catch (e) {
    console.log(e);
    process.exitCode = 1;
  }
};

const fetchGBooksInfo = async (fileName) => {
  let data;
  if (fileName) {
    data = await got(
      `https://www.googleapis.com/books/v1/volumes?q=${encodeURIComponent(
        fileName
      )}`
    ).json();
  } else {
    const { title } = await inquirer.prompt([
      {
        type: "input",
        name: "title",
        message: "What's the book's title?",
      },
    ]);
    data = await got(
      `https://www.googleapis.com/books/v1/volumes?q=${encodeURIComponent(
        title
      )}`
    ).json();
  }

  const choices = [
    ...(data.items || [])
      .sort(
        (
          { saleInfo: { saleability: aSale } },
          { saleInfo: { saleability: bSale } }
        ) => {
          // either "FOR_SALE" or "NOT_FOR_SALE"
          if (aSale === bSale) {
            return 0;
          }
          return bSale === "FOR_SALE" ? 1 : -1;
        }
      )
      .slice(0, 5)
      .map(({ id, volumeInfo: { title, authors, publishedDate } }) => ({
        value: id,
        name: `${title} by ${(authors || []).join(", ")} (${
          (publishedDate || "").split("-")[0]
        })`,
      })),
    { name: "Enter Title/ID Manually", value: RETRY_KEY },
  ];
  const { gbid } = await inquirer.prompt([
    {
      name: "gbid",
      type: "list",
      message: "Which book is it?",
      choices,
    },
  ]);

  if (gbid === RETRY_KEY) {
    // don't pass the filename when recursing
    return fetchGBooksInfo();
  }
  return gbid;
};

const processEpub = async (bookPath, { shouldMove } = {}) => {
  const searchInfo = parse(bookPath).name;

  let gbid;
  while (!gbid) {
    gbid = await fetchGBooksInfo(searchInfo);
  }

  const word_count = await countWords(bookPath, true);

  let { seriesNumber, isTor } = await inquirer.prompt([
    {
      type: "confirm",
      name: "isTor",
      message: "Is this a TOR free download?",
      default: false,
    },
    {
      type: "number",
      name: "seriesNumber",
      message:
        "What number in the series is it? Put `-1` if it's not part of a series.",
      default: -1,
    },
  ]);

  if (seriesNumber < 1) {
    seriesNumber = undefined;
  }

  await sendData({ gbid, isTor, seriesNumber, word_count });

  if (shouldMove) {
    if (bookPath.includes("Dropbox/Apps/Calibre")) {
      console.log("skipping move because it's already in calibre");
    } else {
      fs.renameSync(bookPath, `${EBOOKS_DIR}/${parse(bookPath).base}`);
      console.log(`moved file to ${EBOOKS_DIR}`);
    }
  } else {
    console.log(`skipping move`);
  }
};

const processOdm = async () => {
  const loansPath = `${HOME}/Downloads/loans.temp.json`;

  const { status, stderr } = spawnSync(
    "odmpy",
    [
      "--noversioncheck",
      "libby",
      "--settings",
      `${HOME}/.config/odmpy`,
      "--exportloans",
      loansPath,
    ],
    {
      encoding: "utf-8",
    }
  );
  if (status) {
    console.error("err from odmpy:");
    throw new Error(stderr);
  }
  const audiobookLoans = require(loansPath);

  // libby command treats "latest" as "last", so grab the last so I stay in sync with the downloader
  const audiobookInfo = audiobookLoans[audiobookLoans.length - 1];

  if (!audiobookInfo) {
    throw new Error(`no libby loans found!`);
  }
  const duration = audiobookInfo.formats.find(
    (l) => l.id === "audiobook-mp3"
  ).duration;
  const times = duration.split(":").map((n) => parseInt(n));
  const num_minutes = times[0] * 60 + times[1];

  const searchInfo = `${audiobookInfo.title} ${audiobookInfo.firstCreatorName}`; // might need author too, might not
  console.log("searching for", searchInfo);

  let gbid;
  while (!gbid) {
    gbid = await fetchGBooksInfo(searchInfo);
  }

  let { seriesNumber, isTor } = await inquirer.prompt([
    {
      type: "confirm",
      name: "isTor",
      message: "Is this a TOR free download?",
      default: false,
    },
    {
      type: "number",
      name: "seriesNumber",
      message:
        "What number in the series is it? Put `-1` if it's not part of a series.",
      default: -1,
    },
  ]);

  if (seriesNumber < 1) {
    seriesNumber = undefined;
  }
  await sendData({ gbid, isTor, seriesNumber, num_minutes });
  await unlink(loansPath);
  console.log("Done! Next, run `libby`.");
};

const processAudible = async (audiblePath) => {
  const { status, stdout, stderr } = spawnSync(
    // spits out a json of duration and title as pulled from the metadata of the file
    "ffprobe",
    [
      "-v",
      "error",
      "-show_entries",
      "format_tags=title",
      "-show_entries",
      "format=duration",
      "-of",
      "json",
      audiblePath,
    ],
    {
      encoding: "utf-8",
    }
  );

  if (status !== 0) {
    throw new Error(stderr);
  }
  const {
    format: {
      duration,
      tags: { title },
    },
  } = JSON.parse(stdout);

  const num_minutes = Math.floor(parseFloat(duration) / 60);

  let gbid;
  while (!gbid) {
    gbid = await fetchGBooksInfo(title);
  }

  let { seriesNumber } = await inquirer.prompt([
    {
      type: "number",
      name: "seriesNumber",
      message:
        "What number in the series is it? Put `-1` if it's not part of a series.",
      default: -1,
    },
  ]);
  if (seriesNumber < 1) {
    seriesNumber = undefined;
  }

  await sendData({ gbid, seriesNumber, num_minutes });
  copyToClipboard(`audible ${audiblePath}`);
  console.log("Done! The `audible` command has been copied to the clipboard.");
};

/////////////////////////////////////////////////////////////////

program
  .arguments("<PATH>")
  .option(
    "-m, --move",
    "Move the file to the `~/Downloads/ebooks` folder if the operation is successful"
  );

program.parse(process.argv);

const errorOut = () => {
  console.error(
    "ERR: Supply either a path (either an epub file or a directory with exactly 1 of them) or the word `libby` (for audiobooks)\n"
  );
  console.log(program.help());
  process.exit(1);
};

if (program.args.length !== 1) {
  errorOut();
}

let inputPath = "";
if (program.args[0] === "libby") {
  inputPath = "libby";
} else {
  // turn `.` into an actual path
  inputPath = resolve(program.args[0]);

  const ALLOWED_EXTENSIONS = [".epub", ".odm", ".aax", ".m4b"];

  if (fs.lstatSync(inputPath).isDirectory()) {
    const files = fs.readdirSync(inputPath);
    const matchingFiles = files.filter((file) =>
      ALLOWED_EXTENSIONS.includes(extname(file))
    );

    if (matchingFiles.length !== 1) {
      errorOut();
    }

    inputPath = join(inputPath, matchingFiles[0]);
  } else if (!ALLOWED_EXTENSIONS.includes(extname(inputPath))) {
    errorOut();
  }
}

(inputPath === "libby"
  ? processOdm()
  : extname(inputPath) === ".epub"
  ? processEpub(inputPath, { shouldMove: program.opts().move })
  : extname(inputPath) === ".aax" || extname(inputPath) === ".m4b"
  ? processAudible(inputPath)
  : (() => {
      throw new Error(`unknown operation, got ${inputPath}`);
    })()
).catch((e) => {
  console.error(e);
  process.exit(1);
});
